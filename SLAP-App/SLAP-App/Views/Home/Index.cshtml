@{
	ViewBag.Title = "Home Page";
	SLAP_App.Models.AppraisalSeasonViewModel inProgressAppraisalSeason = (SLAP_App.Models.AppraisalSeasonViewModel)ViewBag.InProgressAppraisalSeason;
	List<SLAP_App.Models.PCAssociateViewModel> pcAssociateViewModels = ViewBag.PcAssociateUserViewModels;
	SLAP_App.Models.User loggedInUser = (SLAP_App.Models.User)ViewBag.LoggedInUser;
}

<div class="jumbotron">
	<h1>Appraisal Season</h1>
	<p class="lead">You can view list of all existing appraisal seasons by clicking on view.</p><br />
	<p>
		@if (inProgressAppraisalSeason == null)
		{
			<font color="red">There is no active appraisal season.</font>
		}
		else
		{
			if (inProgressAppraisalSeason.IsActive)
			{
				<font color="green">Current active appraisal season: @inProgressAppraisalSeason.Name</font>
			}
			else
			{
				<font color="blue">Current under preparation appraisal season: @inProgressAppraisalSeason.Name</font>
			}

		}
	</p>
	@if (loggedInUser.IsAdmin)
	{
		<p>
			@if (inProgressAppraisalSeason == null)
			{
				<a href="@Url.Action("Create", "AppraisalSeason")" class="btn btn-primary btn-lg">Create &raquo;</a>
			}
			else
			{
				if (!inProgressAppraisalSeason.IsActive)
				{
					<a href="@Url.Action("Start", "AppraisalSeason", new { id = inProgressAppraisalSeason.AppraisalSeasonId } )" class="btn btn-primary btn-lg float-right"
					   @if (!inProgressAppraisalSeason.AreAllDatesSet()) { @: onClick="alert('One or more dates for appraisal season are not set. Please edit appraisal season to set the dates before starting the season.'); return false;"
					   }>Start &raquo;</a>
					<a href="@Url.Action("Edit", "AppraisalSeason", new { id = inProgressAppraisalSeason.AppraisalSeasonId } )" class="btn btn-primary btn-lg">Edit &raquo;</a>
					<a href="@Url.Action("Delete", "AppraisalSeason", new { id = inProgressAppraisalSeason.AppraisalSeasonId } )" class="btn btn-primary btn-lg">Delete &raquo;</a>
				}
				else
				{
					<a href="@Url.Action("View", "AppraisalSeason", new { id = inProgressAppraisalSeason.AppraisalSeasonId } )" class="btn btn-primary btn-lg">View &raquo;</a>
					<a href="@Url.Action("Complete", "AppraisalSeason", new { id = inProgressAppraisalSeason.AppraisalSeasonId } )" class="btn btn-primary btn-lg float-right">Complete &raquo;</a>
				}
			}
		</p>
	}
</div>

@if (inProgressAppraisalSeason != null)
{
	if (!inProgressAppraisalSeason.IsActive)
	{
		<div class="jumbotron">
			<h1>Employee Hierarchy</h1>
			<p class="lead">You can view list of user and change the hierarchy</p><br />
			<p><a href="@Url.Action("Index", "Admin")" class="btn btn-primary btn-lg">View &raquo;</a></p>
		</div>
	}

	if (inProgressAppraisalSeason.IsActive)
	{
		if (loggedInUser.IsPC)
		{
			<div class="jumbotron overflow-auto">
				<h1>My Associates</h1>
				@*<p class="lead">You can view list of associates</p><br />
					<p><a href="@Url.Action("Index", "PC")" class="btn btn-primary btn-lg">View &raquo;</a></p>*@

				<div class="float-left">
					@for (var i = 0; i < pcAssociateViewModels.Count; i++)
					{
						@Html.Partial("../PC/_pcAssociateView", pcAssociateViewModels[i]);
					}
				</div>
			</div>
		}
		<div class="jumbotron overflow-auto">
			<h1>Myself - @loggedInUser.displayName</h1>
			<div class="overflow-auto">
				<div class="float-left">
					<h2>
						PC: @if (loggedInUser.PCAssociateModel != null)
						{@Html.Raw(loggedInUser.PC.displayName);
					}
					else
					{ @Html.Raw("<font color='red'>PC assignment not done yet</font>");
				}
					</h2>
				</div>
				<div class="float-right">
					Self appraisal form <br />
					@if (loggedInUser.PCAssociateModel != null && !string.IsNullOrEmpty(loggedInUser.PCAssociateModel.SelfAppraisalDocumentUrl))
					{
						<a href="@loggedInUser.PCAssociateModel.SelfAppraisalDocumentUrl" title="Download Self Appraisal Form"><span class="glyphicon glyphicon-download color-green"></span></a>@:&nbsp;&nbsp;&nbsp;
					}
					<a href="">Upload</a>
				</div>
			</div>
			<div class="overflow-auto">
				<div class="float-left width-48 small-margin">
					@if (loggedInUser.PCAssociateModel != null && loggedInUser.PCAssociateModel.PeerListFinalized)
					{
						<table border="1" class="width-100" cellpadding="5">
							<thead>
								<tr>
									<th>Seeking feedback from</th>
									<th>Status</th>
								</tr>
							</thead>
							@foreach (var peer in loggedInUser.SeekingFeedbackFrom)
							{
								<tr>
									<td>@peer.PeerName</td>
									<td>
										@if (string.IsNullOrEmpty(peer.FeedbackDocumentUrl))
										{
											<span class="glyphicon glyphicon-remove-circle color-red" title="Not provided"></span>
										}
										else if (peer.ShareFeedbackWithAssociate)
										{
											<a href="@peer.FeedbackDocumentUrl" title="Download Appraisal Form From Peer"><span class="glyphicon glyphicon-download color-green" title="Download"></span></a>
										}
										else
										{
											<span class="glyphicon glyphicon-ok color-green" title="Provided, but not shared"></span>
										}
									</td>
								</tr>
							}
						</table>
					}
					else
					{
						@Html.Raw("<font color='red'>Peer list not finalized yet</font>");
					}
				</div>
				<div class="float-left width-48 small-margin">
					@if (loggedInUser.SendingFeedbackTo != null && loggedInUser.SendingFeedbackTo.Count > 0)
					{
						<table border="1" class="width-100" cellpadding="5">
							<thead>
								<tr>
									<th>Sending feedback to</th>
									<th>Current version</th>
									<th>Upload new</th>
								</tr>
							</thead>
							@foreach (var peer in loggedInUser.SendingFeedbackTo)
							{
								<tr>
									<td>@peer.AssociateName</td>
									<td>
										@if (string.IsNullOrEmpty(peer.FeedbackDocumentUrl))
										{
											<span class="glyphicon glyphicon-remove-circle color-red" title="Not provided"></span>
										}
										else
										{
											<a href="@peer.FeedbackDocumentUrl" title="Download Appraisal Form For Peer"><span class="glyphicon glyphicon-download color-green" title="Download"></span></a>
										}
									</td>
									<td><a href="">Upload</a></td>
								</tr>
							}
						</table>
					}
					else
					{
						@Html.Raw("<font color='red'>No one seeking feedback from you yet</font>");
					}
				</div>
			</div>
		</div>
	}
	@*<div class="row">*@
	@*    <div class="col-md-4">*@
	@*        <h2>Getting started</h2>*@
	@*        <p>*@
	@*            ASP.NET MVC gives you a powerful, patterns-based way to build dynamic websites that*@
	@*            enables a clean separation of concerns and gives you full control over markup*@
	@*            for enjoyable, agile development.*@
	@*        </p>*@
	@*        <p><a class="btn btn-default" href="https://go.microsoft.com/fwlink/?LinkId=301865">Learn more &raquo;</a></p>*@
	@*    </div>*@
	@*    <div class="col-md-4">*@
	@*        <h2>Get more libraries</h2>*@
	@*        <p>NuGet is a free Visual Studio extension that makes it easy to add, remove, and update libraries and tools in Visual Studio projects.</p>*@
	@*        <p><a class="btn btn-default" href="https://go.microsoft.com/fwlink/?LinkId=301866">Learn more &raquo;</a></p>*@
	@*    </div>*@
	@*    <div class="col-md-4">*@
	@*        <h2>Web Hosting</h2>*@
	@*        <p>You can easily find a web hosting company that offers the right mix of features and price for your applications.</p>*@
	@*        <p><a class="btn btn-default" href="https://go.microsoft.com/fwlink/?LinkId=301867">Learn more &raquo;</a></p>*@
	@*    </div>*@
	@*    @Html.ActionLink("List of Appraisal Processes", "Index", "AppraisalProcesses")*@
	@*</div>*@
}